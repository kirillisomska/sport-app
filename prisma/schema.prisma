generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  events        Event[]
  company       Company?
}

enum UserRole {
  ADMIN
  USER
  COMPANY
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model EventType {
  id    String  @id @default(cuid())
  value String
  Event Event[]
}

model Event {
  id           String    @id @default(cuid())
  name         String
  description  String?
  logo         String
  type         EventType @relation(fields: [eventTypeId], references: [id])
  eventTypeId  String
  location     String?
  date         DateTime?
  socialLink   String?
  maxUserCount Int
  users        User[]
  Company      Company?  @relation(fields: [companyId], references: [id])
  companyId    String?
  isAccepted   Boolean   @default(false)
}

model Company {
  id          String  @id @default(cuid())
  name        String
  description String?
  logoUrl     String?
  EventList   Event[]
  socialLink  String?
  owner       User    @relation(fields: [userId], references: [id])
  userId      String  @unique
  isAccepted  Boolean @default(false)
}
